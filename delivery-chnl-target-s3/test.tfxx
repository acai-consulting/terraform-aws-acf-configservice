
# ¦ CORE LOGGING - BUCKET
# ---------------------------------------------------------------------------------------------------------------------
#tfsec:ignore:avd-aws-0089
resource "aws_s3_bucket" "core_log_bucket" {
  #checkov:skip=CKV_AWS_18 : No access-logs for findings bucket
  #checkov:skip=CKV_AWS_144 : No Cross-Region Bucket replication - #TODO maybe a feature for later
  bucket        = var.semper_core_logging_settings.core_logging.security_findings_bucket.name
  force_destroy = var.semper_core_logging_settings.core_logging.security_findings_bucket.force_destroy
  tags          = local.resource_tags
  provider      = aws.core_logging
}

resource "aws_s3_bucket_versioning" "core_log_bucket" {
  bucket = aws_s3_bucket.core_log_bucket.id
  versioning_configuration {
    status = "Enabled"
  }
  provider = aws.core_logging
}

resource "aws_s3_bucket_server_side_encryption_configuration" "core_log_bucket" {
  bucket = aws_s3_bucket.core_log_bucket.id

  rule {
    apply_server_side_encryption_by_default {
      kms_master_key_id = aws_kms_key.core_log_bucket_key.id
      sse_algorithm     = "aws:kms"
    }
  }
  provider = aws.core_logging
}

resource "aws_s3_bucket_lifecycle_configuration" "core_log_bucket" {
  #checkov:skip=CKV_AWS_300 : No Multipart Upload
  bucket = aws_s3_bucket.core_log_bucket.id

  rule {
    id     = "Expiration"
    status = "Enabled"
    expiration {
      days = var.semper_core_logging_settings.core_logging.security_findings_bucket.days_to_expiration
    }
    noncurrent_version_expiration {
      noncurrent_days = 1
    }
  }
  provider = aws.core_logging
}

resource "aws_s3_bucket_public_access_block" "core_log_bucket" {
  bucket = aws_s3_bucket.core_log_bucket.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
  provider                = aws.core_logging
}

resource "aws_s3_bucket_notification" "core_log_bucket_notification" {
  count = local.core_sec_s3_notification == true ? 1 : 0

  bucket = aws_s3_bucket.core_log_bucket.id
  topic {
    id        = "core-security-s3-notification-sns"
    topic_arn = aws_sns_topic.s3_notification_sns_new[0].arn
    events    = ["s3:ObjectCreated:*"]
  }
  provider = aws.core_logging
}



# ---------------------------------------------------------------------------------------------------------------------
# ¦ CORE LOGGING - BUCKET POLICY
# https://aws.amazon.com/blogs/security/how-to-prevent-uploads-of-unencrypted-objects-to-amazon-s3/
# https://aws.amazon.com/premiumsupport/knowledge-center/s3-bucket-store-kms-encrypted-objects/
resource "aws_s3_bucket_policy" "core_log_bucket_policy" {
  bucket   = var.semper_core_logging_settings.core_logging.security_findings_bucket.name
  policy   = data.aws_iam_policy_document.core_log_bucket_policy.json
  provider = aws.core_logging
}

data "aws_iam_policy_document" "core_log_bucket_policy" {
  source_policy_documents = var.core_log_bucket_policy_grants_json == null ? null : [var.core_log_bucket_policy_grants_json]
  statement {
    sid    = "Require_KMS_CMK_Encryption"
    effect = "Deny"
    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }
    actions = ["s3:PutObject"]
    resources = [
      "arn:aws:s3:::${aws_s3_bucket.core_log_bucket.bucket}/*"
    ]
    # DenyIncorrectEncryptionHeader
    condition {
      test     = "StringNotEquals"
      variable = "s3:x-amz-server-side-encryption"
      values   = ["aws:kms"]
    }
    # Require correct KMS CMK key
    condition {
      test     = "StringNotEquals"
      variable = "s3:x-amz-server-side-encryption-aws-kms-key-id"
      values   = [aws_kms_key.core_log_bucket_key.key_id]
    }
  }
  statement {
    sid    = "AwsAclCheck"
    effect = "Allow"
    principals {
      type        = "AWS"
      identifiers = [module.core_sec_processed_to_s3_lambda.execution_iam_role.arn]
    }
    actions   = ["s3:GetBucketAcl"]
    resources = ["arn:aws:s3:::${aws_s3_bucket.core_log_bucket.bucket}"]
  }
  statement {
    sid    = "AwsWrite"
    effect = "Allow"
    principals {
      type        = "AWS"
      identifiers = [module.core_sec_processed_to_s3_lambda.execution_iam_role.arn]
    }
    actions   = ["s3:PutObject"]
    resources = ["arn:aws:s3:::${aws_s3_bucket.core_log_bucket.bucket}/*"]
    condition {
      test     = "StringEquals"
      variable = "s3:x-amz-acl"
      values   = ["bucket-owner-full-control"]
    }
  }
  statement {
    sid    = "SnsSubscription"
    effect = "Allow"
    principals {
      type        = "AWS"
      identifiers = ["arn:aws:iam::${data.aws_caller_identity.core_logging.account_id}:root"]
    }
    actions   = ["s3:PutBucketNotification"]
    resources = ["arn:aws:s3:::${aws_s3_bucket.core_log_bucket.bucket}"]
  }
  provider = aws.core_logging
}

# ---------------------------------------------------------------------------------------------------------------------
# ¦ CORE LOGGING - KMS CMK
# ---------------------------------------------------------------------------------------------------------------------
resource "aws_kms_key" "core_log_bucket_key" {
  description             = "encryption key for object uploads to ${var.semper_core_logging_settings.core_logging.security_findings_bucket.name}"
  deletion_window_in_days = 7
  enable_key_rotation     = true
  policy                  = data.aws_iam_policy_document.core_log_bucket_key_policy.json
  tags                    = local.resource_tags
  provider                = aws.core_logging
}

data "aws_iam_policy_document" "core_log_bucket_key_policy" {
  #checkov:skip=CKV_AWS_356 : Resource policy
  #checkov:skip=CKV_AWS_109
  #checkov:skip=CKV_AWS_111
  # enable IAM in logging account
  source_policy_documents = var.core_log_bucket_kms_cmk_policy_grants_json == null ? null : [var.core_log_bucket_kms_cmk_policy_grants_json]
  statement {
    sid    = "Enable IAM User Permissions"
    effect = "Allow"
    principals {
      type        = "AWS"
      identifiers = ["arn:aws:iam::${data.aws_caller_identity.core_logging.account_id}:root"]
    }
    actions   = ["kms:*"]
    resources = ["*"]
  }
  # allow Lambda function to encryption context
  statement {
    sid       = "Allow IAM Role to encrypt logs"
    effect    = "Allow"
    actions   = ["kms:GenerateDataKey"]
    resources = ["*"]
    principals {
      type        = "AWS"
      identifiers = [aws_iam_role.core_log_bucket_access.arn]
    }
  }
  provider = aws.core_logging
}

resource "aws_kms_alias" "security_event_log_kms" {
  name          = "alias/${replace(aws_s3_bucket.core_log_bucket.bucket, ".", "-")}-key"
  target_key_id = aws_kms_key.core_log_bucket_key.key_id
  provider      = aws.core_logging
}

